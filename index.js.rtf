{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 let currentNumber = ""; let stack = []; // Stack to store operands and operators function appendNumber(number) \{ currentNumber += number; document.getElementById("result").value = currentNumber; \} function appendOperation(op) \{ if (currentNumber !== "") \{ stack.push(currentNumber); currentNumber = ""; \} stack.push(op); \} function clearScreen() \{ currentNumber = ""; stack = []; document.getElementById("result").value = ""; \} function calculate() \{ let tempStack = stack.slice(); // Create a copy of the stack to avoid modifying original let result; while (tempStack.length > 1) \{ letoperand1 = parseFloat(tempStack.shift()); let operator = tempStack.shift(); let operand2 = parseFloat(tempStack.shift());switch (operator) \{ case '^': result = Math.pow(operand1, operand2); break; case '*': case '/': // Evaluate multiplication and division before addition and subtraction result = performOperation(operand1, operator, operand2); break; default: // Addition and subtraction come last tempStack.unshift(operand1); // Push operand1 back for later calculation result = performOperation(tempStack.shift(), operator, operand2); \} tempStack.unshift(result); // Push the result back onto the stack \} result = tempStack.pop(); // Get the final result from the stack currentNumber = result.toString();document.getElementById("result").value = currentNumber; document.getElementById("answer").value = currentNumber; \} function performOperation(a, operator, b) \{ switch (operator) \{ case '+': return a + b; case '-': return a - b; case '*': return a * b; case '/': if (b === 0) \{ alert("Division by zero error!"); return; \} return a / b; \} \}}